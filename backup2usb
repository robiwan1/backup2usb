#!/bin/sh 
# Backup HOME to USB device in BACKUP-dir
# additional EXCLUDES in HOME/.backup2usb
# LOG file is written to BACKUP-dir (v02)
# 20171212,ha:first design
# 20180109,ha:multiple partition handling
# 20240507,ha:supress zenity Gtk-WARNING
# USAGE: backup2usb [device|COMMAND]
# 		  i.e sdb1
#http://bernaerts.dyndns.org/linux/75-debian/54-debian-udev-backup
#http://www.oehl.tv/udev-systemd/
#https://github.com/robiwan1/backup2usb
#TRY="--dry-run";DBG=echo
#
BD=BACKUP
PG=`basename $0`
UB=/etc/udev/rules.d
SB=/etc/systemd/system
DV=$1; [ ! "$DV" ] && grep "^# " $0 && exit
EX=".dbus .cache .gnupg .DS_Store .thumbnails .fontconfig Trash"
# 			    STATUS show excludes and if installed
if [ "$DV" = "STATUS" ];then
   echo status UDEV ruleset && cat $UB/$PG.rules
   echo status SYSTEMD service && cat $SB/$PG@.service 
   echo "EXCLUDES: \c"
   for e in $EX `cat $HOME/.$PG 2>/dev/null`;do echo "--exclude $e \c";done
   echo "\nk-used: \c";du -sk $HOME
   exit
fi
# 			    REMOVE run as root to uninstall
if [ "$DV" = "REMOVE" ];then
   [ "`whoami`" = "root" ] && OUT="command"
   echo remove UDEV ruleset $UB/$PG.rules
   ${OUT:-echo RUN:} rm $UB/$PG.rules
   ${OUT:-echo RUN:} udevadm control --reload
   echo remove SYSTEMD service $SB/$PG@.service 
   ${OUT:-echo RUN:} systemctl disable $PG@.service
   ${OUT:-echo RUN:} rm $SB/$PG@.service
   exit
fi
# 			    INSTALL run as root to install
if [ "$DV" = "INSTALL" ];then
   for MP in `mount|grep /media|cut -f3 -d\ `;do
      [ -d "$MP/$BD" ] && break
   done
   [ ! -d "$MP/$BD" ] && echo "no BACKUP USB Device found - exiting!" && exit
   DV=`mount |grep $MP|awk -F"[/ ]" '{print $3}'`
   echo create UDEV ruleset $UB/$PG.rules
   [ "`whoami`" = "root" ] && OUT="command"
   udevadm info -a -n $DV|awk -v PG="$PG" '
      BEGIN {printf "KERNEL==\"sd*\", ACTION==\"add\", SUBSYSTEMS==\"usb\","}
#	/ATTRS{model}==/{printf $0","}
#	/ATTRS{vendor}==/{v++;if(v<=1)printf $0","}
#	/ATTRS{manufacturer}==/{m++;if(m<=1)printf $0","}
#	/ATTRS{serial}==/{r++;if(r<=1)printf $0","}
      /ATTRS{idVendor}==/{i++;if(i<=1)printf $0","}
      /ATTRS{idProduct}==/{p++;if(p<=1)printf $0","}
      END {print "ENV{SYSTEMD_WANTS}+=\""PG"@%k.service\""}' | tee ${OUT:+$UB/$PG.rules}
   ${OUT:-echo RUN:} udevadm control --reload
   echo create SYSTEMD service $SB/$PG@.service 
   echo "[Unit]\nDescription=$PG\n[Service]\nExecStart=$0 %I\n[Install]\nWantedBy=system.device" | tee ${OUT:+$SB/$PG@.service}
   ${OUT:-echo RUN:} systemctl enable $PG@.service
   exit
fi
DW=`echo $DV|cut -c-3`
echo "WAITING for mount of $DW..." && sleep 16
for DV in `cd /dev;ls -1 $DW*`;do
   MP=`mount|grep $DV|cut -f3 -d\ `
   [ ! "$MP" ] && echo "Device $DV NOT MOUNTED" && continue
   echo SEARCHING $MP/$BD...
   [ -d "$MP/$BD" ] && break
done
[ ! "$MP" ] && echo "$BD missing on device - exiting!" && exit
[ ! "$USR" ] && USR=`echo $MP|cut -f3 -d/`
[ ! -d "$MP/$BD/$USR" ] && mkdir $MP/$BD/$USR
echo "STARTING incemential backup for user <$USR>..."
for e in $EX `cat /home/$USR/.$PG 2>/dev/null`;do EXCLUDES="$EXCLUDES --exclude $e";done
$DBG rsync -av --modify-window=1 $TRY $EXCLUDES /home/$USR/ $MP/$BD/$USR >$MP/$BD/$USR-`date +%g%m%d%H%M`.log 2>&1
ERR=$?
sync && echo "...FINISHED at `date +%F,%R`"
export DISPLAY=:0 XAUTHORITY=/home/$USR/.Xauthority
#notify-send "BACKUP finished!($ERR)"
zenity --info --text "BACKUP finished!($ERR)" 2>/dev/null
#zenity --notification --text "BACKUP finished!($ERR)"
